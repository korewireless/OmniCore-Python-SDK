# coding: utf-8

"""
    OmniCore Model and State Management API

    This is an OmniCore Model and State Management server.  # noqa: E501

    The version of the OpenAPI document: 1.8.4
    Contact: omnicoresupport@korewireless.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class VaultStatusDetails(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId")
    storage_type: Optional[StrictStr] = Field(None, alias="storageType")
    is_enabled: Optional[StrictBool] = Field(None, alias="isEnabled")
    is_created: Optional[StrictBool] = Field(None, alias="isCreated")
    updatedon: Optional[StrictStr] = None
    created_on: Optional[StrictStr] = Field(None, alias="createdOn")
    mqtt_id: Optional[StrictStr] = Field(None, alias="MqttId")
    __properties = ["subscriptionId", "storageType", "isEnabled", "isCreated", "updatedon", "createdOn", "MqttId"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VaultStatusDetails:
        """Create an instance of VaultStatusDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VaultStatusDetails:
        """Create an instance of VaultStatusDetails from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VaultStatusDetails.parse_obj(obj)

        _obj = VaultStatusDetails.parse_obj({
            "subscription_id": obj.get("subscriptionId"),
            "storage_type": obj.get("storageType"),
            "is_enabled": obj.get("isEnabled"),
            "is_created": obj.get("isCreated"),
            "updatedon": obj.get("updatedon"),
            "created_on": obj.get("createdOn"),
            "mqtt_id": obj.get("MqttId")
        })
        return _obj

