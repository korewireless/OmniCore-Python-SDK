# coding: utf-8

"""
    OmniCore Model and State Management API

    This is an OmniCore Model and State Management server.  # noqa: E501

    The version of the OpenAPI document: 1.8.9
    Contact: omnicoresupport@korewireless.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class MqttConfig(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    mqtt_enabled_state: Optional[StrictStr] = Field(None, alias="mqttEnabledState", description="MqttEnabledState: If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.  Possible values:   \"MQTT_STATE_UNSPECIFIED\" - No MQTT state specified. If not specified, MQTT will be enabled by default.   \"MQTT_ENABLED\" - Enables a MQTT connection.   \"MQTT_DISABLED\" - Disables a MQTT connection.")
    __properties = ["mqttEnabledState"]

    @validator('mqtt_enabled_state')
    def mqtt_enabled_state_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('MQTT_ENABLED', 'MQTT_DISABLED', 'MQTT_STATE_UNSPECIFIED'):
            raise ValueError("must validate the enum values ('MQTT_ENABLED', 'MQTT_DISABLED', 'MQTT_STATE_UNSPECIFIED')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MqttConfig:
        """Create an instance of MqttConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MqttConfig:
        """Create an instance of MqttConfig from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MqttConfig.parse_obj(obj)

        _obj = MqttConfig.parse_obj({
            "mqtt_enabled_state": obj.get("mqttEnabledState")
        })
        return _obj

