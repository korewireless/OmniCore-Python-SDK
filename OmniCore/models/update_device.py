# coding: utf-8

"""
    OmniCore Model and State Management API

    This is an OmniCore Model and State Management server.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@korewireless.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from OmniCore.models.device_credential import DeviceCredential
from OmniCore.models.log_level import LogLevel

class UpdateDevice(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    blocked: Optional[StrictBool] = None
    credentials: Optional[List[DeviceCredential]] = None
    log_level: Optional[LogLevel] = Field(None, alias="logLevel")
    metadata: Optional[Dict[str, StrictStr]] = None
    __properties = ["blocked", "credentials", "logLevel", "metadata"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateDevice:
        """Create an instance of UpdateDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in credentials (list)
        _items = []
        if self.credentials:
            for _item in self.credentials:
                if _item:
                    _items.append(_item.to_dict())
            _dict['credentials'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateDevice:
        """Create an instance of UpdateDevice from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateDevice.parse_obj(obj)

        _obj = UpdateDevice.parse_obj({
            "blocked": obj.get("blocked"),
            "credentials": [DeviceCredential.from_dict(_item) for _item in obj.get("credentials")] if obj.get("credentials") is not None else None,
            "log_level": obj.get("logLevel"),
            "metadata": obj.get("metadata")
        })
        return _obj

