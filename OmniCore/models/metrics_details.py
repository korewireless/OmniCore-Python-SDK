# coding: utf-8

"""
    OmniCore Model and State Management API

    This is an OmniCore Model and State Management server.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: omnicoresupport@korewireless.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class MetricsDetails(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    no_of_messages_for30_minutes: Optional[List[Dict[str, Any]]] = Field(None, alias="NoOfMessagesFor30Minutes")
    no_of_messages_for48_hours: Optional[List[Dict[str, Any]]] = Field(None, alias="NoOfMessagesFor48Hours")
    billable_bytes_received: Optional[StrictInt] = Field(None, alias="billableBytesReceived")
    billable_bytes_sent: Optional[StrictInt] = Field(None, alias="billableBytesSent")
    billable_message_size: Optional[StrictInt] = Field(None, alias="billableMessageSize")
    bytes_received: Optional[StrictInt] = Field(None, alias="bytesReceived")
    bytes_sent: Optional[StrictInt] = Field(None, alias="bytesSent")
    message_size: Optional[StrictInt] = Field(None, alias="messageSize")
    no_of_ack_messages: Optional[StrictInt] = Field(None, alias="noOfAckMessages")
    no_of_command_messages: Optional[StrictInt] = Field(None, alias="noOfCommandMessages")
    no_of_config_messages: Optional[StrictInt] = Field(None, alias="noOfConfigMessages")
    no_of_device_connections_failed: Optional[StrictInt] = Field(None, alias="noOfDeviceConnectionsFailed")
    no_of_devices: Optional[StrictInt] = Field(None, alias="noOfDevices")
    no_of_dis_connections: Optional[StrictInt] = Field(None, alias="noOfDisConnections")
    no_of_event_messages: Optional[StrictInt] = Field(None, alias="noOfEventMessages")
    no_of_gateway_connections_failed: Optional[StrictInt] = Field(None, alias="noOfGatewayConnectionsFailed")
    no_of_gateways: Optional[StrictInt] = Field(None, alias="noOfGateways")
    no_of_loop_back_messages: Optional[StrictInt] = Field(None, alias="noOfLoopBackMessages")
    no_of_messages: Optional[StrictInt] = Field(None, alias="noOfMessages")
    no_of_publish_errors: Optional[StrictInt] = Field(None, alias="noOfPublishErrors")
    no_of_registries: Optional[StrictInt] = Field(None, alias="noOfRegistries")
    no_of_state_messages: Optional[StrictInt] = Field(None, alias="noOfStateMessages")
    no_of_subscribe: Optional[StrictInt] = Field(None, alias="noOfSubscribe")
    no_of_successful_connections: Optional[StrictInt] = Field(None, alias="noOfSuccessfulConnections")
    no_of_un_subscribe: Optional[StrictInt] = Field(None, alias="noOfUnSubscribe")
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId")
    __properties = ["NoOfMessagesFor30Minutes", "NoOfMessagesFor48Hours", "billableBytesReceived", "billableBytesSent", "billableMessageSize", "bytesReceived", "bytesSent", "messageSize", "noOfAckMessages", "noOfCommandMessages", "noOfConfigMessages", "noOfDeviceConnectionsFailed", "noOfDevices", "noOfDisConnections", "noOfEventMessages", "noOfGatewayConnectionsFailed", "noOfGateways", "noOfLoopBackMessages", "noOfMessages", "noOfPublishErrors", "noOfRegistries", "noOfStateMessages", "noOfSubscribe", "noOfSuccessfulConnections", "noOfUnSubscribe", "subscriptionId"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MetricsDetails:
        """Create an instance of MetricsDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MetricsDetails:
        """Create an instance of MetricsDetails from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MetricsDetails.parse_obj(obj)

        _obj = MetricsDetails.parse_obj({
            "no_of_messages_for30_minutes": obj.get("NoOfMessagesFor30Minutes"),
            "no_of_messages_for48_hours": obj.get("NoOfMessagesFor48Hours"),
            "billable_bytes_received": obj.get("billableBytesReceived"),
            "billable_bytes_sent": obj.get("billableBytesSent"),
            "billable_message_size": obj.get("billableMessageSize"),
            "bytes_received": obj.get("bytesReceived"),
            "bytes_sent": obj.get("bytesSent"),
            "message_size": obj.get("messageSize"),
            "no_of_ack_messages": obj.get("noOfAckMessages"),
            "no_of_command_messages": obj.get("noOfCommandMessages"),
            "no_of_config_messages": obj.get("noOfConfigMessages"),
            "no_of_device_connections_failed": obj.get("noOfDeviceConnectionsFailed"),
            "no_of_devices": obj.get("noOfDevices"),
            "no_of_dis_connections": obj.get("noOfDisConnections"),
            "no_of_event_messages": obj.get("noOfEventMessages"),
            "no_of_gateway_connections_failed": obj.get("noOfGatewayConnectionsFailed"),
            "no_of_gateways": obj.get("noOfGateways"),
            "no_of_loop_back_messages": obj.get("noOfLoopBackMessages"),
            "no_of_messages": obj.get("noOfMessages"),
            "no_of_publish_errors": obj.get("noOfPublishErrors"),
            "no_of_registries": obj.get("noOfRegistries"),
            "no_of_state_messages": obj.get("noOfStateMessages"),
            "no_of_subscribe": obj.get("noOfSubscribe"),
            "no_of_successful_connections": obj.get("noOfSuccessfulConnections"),
            "no_of_un_subscribe": obj.get("noOfUnSubscribe"),
            "subscription_id": obj.get("subscriptionId")
        })
        return _obj

