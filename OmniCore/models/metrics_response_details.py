# coding: utf-8

"""
    OmniCore Model and State Management API

    This is an OmniCore Model and State Management server.  # noqa: E501

    The version of the OpenAPI document: 1.8.2
    Contact: omnicoresupport@korewireless.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from OmniCore.models.metrics_data import MetricsData
from OmniCore.models.operation_metrics import OperationMetrics

class MetricsResponseDetails(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionId")
    no_of_files: Optional[StrictInt] = Field(None, alias="noOfFiles")
    file_size: Optional[StrictFloat] = Field(None, alias="fileSize")
    noofoperations: Optional[StrictInt] = None
    operations: Optional[List[OperationMetrics]] = Field(None, alias="Operations")
    details_for_time_period: Optional[List[MetricsData]] = Field(None, alias="detailsForTimePeriod")
    __properties = ["subscriptionId", "noOfFiles", "fileSize", "noofoperations", "Operations", "detailsForTimePeriod"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MetricsResponseDetails:
        """Create an instance of MetricsResponseDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in operations (list)
        _items = []
        if self.operations:
            for _item in self.operations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Operations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in details_for_time_period (list)
        _items = []
        if self.details_for_time_period:
            for _item in self.details_for_time_period:
                if _item:
                    _items.append(_item.to_dict())
            _dict['detailsForTimePeriod'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MetricsResponseDetails:
        """Create an instance of MetricsResponseDetails from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MetricsResponseDetails.parse_obj(obj)

        _obj = MetricsResponseDetails.parse_obj({
            "subscription_id": obj.get("subscriptionId"),
            "no_of_files": obj.get("noOfFiles"),
            "file_size": obj.get("fileSize"),
            "noofoperations": obj.get("noofoperations"),
            "operations": [OperationMetrics.from_dict(_item) for _item in obj.get("Operations")] if obj.get("Operations") is not None else None,
            "details_for_time_period": [MetricsData.from_dict(_item) for _item in obj.get("detailsForTimePeriod")] if obj.get("detailsForTimePeriod") is not None else None
        })
        return _obj

