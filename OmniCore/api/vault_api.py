# coding: utf-8

"""
    OmniCore Model and State Management API

    This is an OmniCore Model and State Management server.  # noqa: E501

    The version of the OpenAPI document: 1.8.7
    Contact: omnicoresupport@korewireless.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from OmniCore.models.audit_result import AuditResult
from OmniCore.models.configurations import Configurations
from OmniCore.models.create_configuration import CreateConfiguration
from OmniCore.models.create_vault_key_body import CreateVaultKeyBody
from OmniCore.models.enable_encryption_body import EnableEncryptionBody
from OmniCore.models.file_details import FileDetails
from OmniCore.models.folder_data import FolderData
from OmniCore.models.frame import Frame
from OmniCore.models.get_exports_response import GetExportsResponse
from OmniCore.models.get_keys_response import GetKeysResponse
from OmniCore.models.get_replays_response import GetReplaysResponse
from OmniCore.models.metrics_response import MetricsResponse
from OmniCore.models.replay_body import ReplayBody
from OmniCore.models.set_retention_body import SetRetentionBody
from OmniCore.models.start_export_body import StartExportBody
from OmniCore.models.vault_status import VaultStatus

from OmniCore.api_client import ApiClient
from OmniCore.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class VaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_vault_configuration(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], create_configuration : Annotated[Optional[CreateConfiguration], Field(description="application/json")] = None, **kwargs) -> Frame:  # noqa: E501
        """create_vault_configuration  # noqa: E501

        create vault configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_vault_configuration(subscriptionid, create_configuration, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param create_configuration: application/json
        :type create_configuration: CreateConfiguration
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Frame
        """
        kwargs['_return_http_data_only'] = True
        return self.create_vault_configuration_with_http_info(subscriptionid, create_configuration, **kwargs)  # noqa: E501

    @validate_arguments
    def create_vault_configuration_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], create_configuration : Annotated[Optional[CreateConfiguration], Field(description="application/json")] = None, **kwargs):  # noqa: E501
        """create_vault_configuration  # noqa: E501

        create vault configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_vault_configuration_with_http_info(subscriptionid, create_configuration, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param create_configuration: application/json
        :type create_configuration: CreateConfiguration
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Frame, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'create_configuration'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vault_configuration" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['create_configuration']:
            _body_params = _params['create_configuration']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '201': "Frame",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/configurations', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_vault_key(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], create_vault_key_body : Annotated[Optional[CreateVaultKeyBody], Field(description="application/json")] = None, **kwargs) -> Frame:  # noqa: E501
        """create_vault_key  # noqa: E501

        Create Vault Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_vault_key(subscriptionid, create_vault_key_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param create_vault_key_body: application/json
        :type create_vault_key_body: CreateVaultKeyBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Frame
        """
        kwargs['_return_http_data_only'] = True
        return self.create_vault_key_with_http_info(subscriptionid, create_vault_key_body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_vault_key_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], create_vault_key_body : Annotated[Optional[CreateVaultKeyBody], Field(description="application/json")] = None, **kwargs):  # noqa: E501
        """create_vault_key  # noqa: E501

        Create Vault Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_vault_key_with_http_info(subscriptionid, create_vault_key_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param create_vault_key_body: application/json
        :type create_vault_key_body: CreateVaultKeyBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Frame, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'create_vault_key_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vault_key" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['create_vault_key_body']:
            _body_params = _params['create_vault_key_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '201': "Frame",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/encryptionkeys', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_configuration(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], configid : Annotated[StrictStr, Field(..., description="config id")], **kwargs) -> Frame:  # noqa: E501
        """delete_configuration  # noqa: E501

        Delete Configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_configuration(subscriptionid, configid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param configid: config id (required)
        :type configid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Frame
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_configuration_with_http_info(subscriptionid, configid, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_configuration_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], configid : Annotated[StrictStr, Field(..., description="config id")], **kwargs):  # noqa: E501
        """delete_configuration  # noqa: E501

        Delete Configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_configuration_with_http_info(subscriptionid, configid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param configid: config id (required)
        :type configid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Frame, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'configid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_configuration" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']
        if _params['configid']:
            _path_params['configid'] = _params['configid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Frame",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/configurations/{configid}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_vault_key(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], keyid : Annotated[StrictStr, Field(..., description="key id")], **kwargs) -> Frame:  # noqa: E501
        """delete_vault_key  # noqa: E501

        Delete Vault Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_vault_key(subscriptionid, keyid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param keyid: key id (required)
        :type keyid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Frame
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_vault_key_with_http_info(subscriptionid, keyid, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_vault_key_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], keyid : Annotated[StrictStr, Field(..., description="key id")], **kwargs):  # noqa: E501
        """delete_vault_key  # noqa: E501

        Delete Vault Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_vault_key_with_http_info(subscriptionid, keyid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param keyid: key id (required)
        :type keyid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Frame, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'keyid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vault_key" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']
        if _params['keyid']:
            _path_params['keyid'] = _params['keyid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Frame",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/encryptionkeys/{keyid}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def enable_encryption(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], enable_encryption_body : Annotated[Optional[EnableEncryptionBody], Field(description="application/json")] = None, **kwargs) -> Frame:  # noqa: E501
        """enable_encryption  # noqa: E501

        Enable Encryption  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enable_encryption(subscriptionid, enable_encryption_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param enable_encryption_body: application/json
        :type enable_encryption_body: EnableEncryptionBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Frame
        """
        kwargs['_return_http_data_only'] = True
        return self.enable_encryption_with_http_info(subscriptionid, enable_encryption_body, **kwargs)  # noqa: E501

    @validate_arguments
    def enable_encryption_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], enable_encryption_body : Annotated[Optional[EnableEncryptionBody], Field(description="application/json")] = None, **kwargs):  # noqa: E501
        """enable_encryption  # noqa: E501

        Enable Encryption  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enable_encryption_with_http_info(subscriptionid, enable_encryption_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param enable_encryption_body: application/json
        :type enable_encryption_body: EnableEncryptionBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Frame, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'enable_encryption_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_encryption" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['enable_encryption_body']:
            _body_params = _params['enable_encryption_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Frame",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/encryption', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_exports(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs) -> GetExportsResponse:  # noqa: E501
        """get_exports  # noqa: E501

        Get Exports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_exports(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetExportsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_exports_with_http_info(subscriptionid, **kwargs)  # noqa: E501

    @validate_arguments
    def get_exports_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs):  # noqa: E501
        """get_exports  # noqa: E501

        Get Exports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_exports_with_http_info(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetExportsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_exports" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetExportsResponse",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/exports', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_registry_data(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs) -> FolderData:  # noqa: E501
        """get_registry_data  # noqa: E501

        Get vault folder data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_registry_data(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FolderData
        """
        kwargs['_return_http_data_only'] = True
        return self.get_registry_data_with_http_info(subscriptionid, **kwargs)  # noqa: E501

    @validate_arguments
    def get_registry_data_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs):  # noqa: E501
        """get_registry_data  # noqa: E501

        Get vault folder data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_registry_data_with_http_info(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FolderData, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registry_data" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "FolderData",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/folders', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_replays(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs) -> GetReplaysResponse:  # noqa: E501
        """get_replays  # noqa: E501

        Get Replays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_replays(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetReplaysResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_replays_with_http_info(subscriptionid, **kwargs)  # noqa: E501

    @validate_arguments
    def get_replays_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs):  # noqa: E501
        """get_replays  # noqa: E501

        Get Replays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_replays_with_http_info(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetReplaysResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_replays" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetReplaysResponse",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/replays', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_vault_audit(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], page_number : Annotated[Optional[StrictInt], Field(description="Page Number")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Page Size")] = None, **kwargs) -> AuditResult:  # noqa: E501
        """get_vault_audit  # noqa: E501

        Get vault Audit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_audit(subscriptionid, page_number, page_size, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param page_number: Page Number
        :type page_number: int
        :param page_size: Page Size
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AuditResult
        """
        kwargs['_return_http_data_only'] = True
        return self.get_vault_audit_with_http_info(subscriptionid, page_number, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def get_vault_audit_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], page_number : Annotated[Optional[StrictInt], Field(description="Page Number")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Page Size")] = None, **kwargs):  # noqa: E501
        """get_vault_audit  # noqa: E501

        Get vault Audit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_audit_with_http_info(subscriptionid, page_number, page_size, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param page_number: Page Number
        :type page_number: int
        :param page_size: Page Size
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AuditResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'page_number',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_audit" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []
        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('pageNumber', _params['page_number']))
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "AuditResult",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/audit', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_vault_configurations(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs) -> Configurations:  # noqa: E501
        """get_vault_configurations  # noqa: E501

        Get vault configurations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_configurations(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Configurations
        """
        kwargs['_return_http_data_only'] = True
        return self.get_vault_configurations_with_http_info(subscriptionid, **kwargs)  # noqa: E501

    @validate_arguments
    def get_vault_configurations_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs):  # noqa: E501
        """get_vault_configurations  # noqa: E501

        Get vault configurations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_configurations_with_http_info(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Configurations, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_configurations" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Configurations",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/configurations', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_vault_files(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], registryid : Annotated[StrictStr, Field(..., description="registry ID")], file_type : Annotated[Optional[StrictStr], Field(description="file type")] = None, **kwargs) -> FileDetails:  # noqa: E501
        """get_vault_files  # noqa: E501

        Get vault files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_files(subscriptionid, registryid, file_type, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param registryid: registry ID (required)
        :type registryid: str
        :param file_type: file type
        :type file_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FileDetails
        """
        kwargs['_return_http_data_only'] = True
        return self.get_vault_files_with_http_info(subscriptionid, registryid, file_type, **kwargs)  # noqa: E501

    @validate_arguments
    def get_vault_files_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], registryid : Annotated[StrictStr, Field(..., description="registry ID")], file_type : Annotated[Optional[StrictStr], Field(description="file type")] = None, **kwargs):  # noqa: E501
        """get_vault_files  # noqa: E501

        Get vault files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_files_with_http_info(subscriptionid, registryid, file_type, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param registryid: registry ID (required)
        :type registryid: str
        :param file_type: file type
        :type file_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FileDetails, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'registryid',
            'file_type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_files" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']
        if _params['registryid']:
            _path_params['registryid'] = _params['registryid']

        # process the query parameters
        _query_params = []
        if _params.get('file_type') is not None:  # noqa: E501
            _query_params.append(('fileType', _params['file_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "FileDetails",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/registry/{registryid}/files', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_vault_keys(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs) -> GetKeysResponse:  # noqa: E501
        """get_vault_keys  # noqa: E501

        Get Vault Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_keys(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetKeysResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_vault_keys_with_http_info(subscriptionid, **kwargs)  # noqa: E501

    @validate_arguments
    def get_vault_keys_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs):  # noqa: E501
        """get_vault_keys  # noqa: E501

        Get Vault Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_keys_with_http_info(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetKeysResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_keys" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetKeysResponse",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/encryptionkeys', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_vault_metrics(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], start_time : Annotated[Optional[StrictStr], Field(description="start time")] = None, end_time : Annotated[Optional[StrictStr], Field(description="end time")] = None, **kwargs) -> MetricsResponse:  # noqa: E501
        """get_vault_metrics  # noqa: E501

        Get vault metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_metrics(subscriptionid, start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param start_time: start time
        :type start_time: str
        :param end_time: end time
        :type end_time: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MetricsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_vault_metrics_with_http_info(subscriptionid, start_time, end_time, **kwargs)  # noqa: E501

    @validate_arguments
    def get_vault_metrics_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], start_time : Annotated[Optional[StrictStr], Field(description="start time")] = None, end_time : Annotated[Optional[StrictStr], Field(description="end time")] = None, **kwargs):  # noqa: E501
        """get_vault_metrics  # noqa: E501

        Get vault metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_metrics_with_http_info(subscriptionid, start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param start_time: start time
        :type start_time: str
        :param end_time: end time
        :type end_time: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MetricsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'start_time',
            'end_time'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_metrics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []
        if _params.get('start_time') is not None:  # noqa: E501
            _query_params.append(('startTime', _params['start_time']))
        if _params.get('end_time') is not None:  # noqa: E501
            _query_params.append(('endTime', _params['end_time']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "MetricsResponse",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/metrics', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_vault_status(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs) -> VaultStatus:  # noqa: E501
        """get_vault_status  # noqa: E501

        Get vault status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_status(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VaultStatus
        """
        kwargs['_return_http_data_only'] = True
        return self.get_vault_status_with_http_info(subscriptionid, **kwargs)  # noqa: E501

    @validate_arguments
    def get_vault_status_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], **kwargs):  # noqa: E501
        """get_vault_status  # noqa: E501

        Get vault status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_status_with_http_info(subscriptionid, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VaultStatus, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_status" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "VaultStatus",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/status', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def set_retention(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], set_retention_body : Annotated[Optional[SetRetentionBody], Field(description="application/json")] = None, **kwargs) -> Frame:  # noqa: E501
        """set_retention  # noqa: E501

        Set Retention Period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_retention(subscriptionid, set_retention_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param set_retention_body: application/json
        :type set_retention_body: SetRetentionBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Frame
        """
        kwargs['_return_http_data_only'] = True
        return self.set_retention_with_http_info(subscriptionid, set_retention_body, **kwargs)  # noqa: E501

    @validate_arguments
    def set_retention_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], set_retention_body : Annotated[Optional[SetRetentionBody], Field(description="application/json")] = None, **kwargs):  # noqa: E501
        """set_retention  # noqa: E501

        Set Retention Period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_retention_with_http_info(subscriptionid, set_retention_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param set_retention_body: application/json
        :type set_retention_body: SetRetentionBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Frame, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'set_retention_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_retention" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['set_retention_body']:
            _body_params = _params['set_retention_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Frame",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/retention', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def start_export(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], start_export_body : Annotated[Optional[StartExportBody], Field(description="application/json")] = None, **kwargs) -> Frame:  # noqa: E501
        """start_export  # noqa: E501

        Start Export  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_export(subscriptionid, start_export_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param start_export_body: application/json
        :type start_export_body: StartExportBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Frame
        """
        kwargs['_return_http_data_only'] = True
        return self.start_export_with_http_info(subscriptionid, start_export_body, **kwargs)  # noqa: E501

    @validate_arguments
    def start_export_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], start_export_body : Annotated[Optional[StartExportBody], Field(description="application/json")] = None, **kwargs):  # noqa: E501
        """start_export  # noqa: E501

        Start Export  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_export_with_http_info(subscriptionid, start_export_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param start_export_body: application/json
        :type start_export_body: StartExportBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Frame, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'start_export_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_export" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['start_export_body']:
            _body_params = _params['start_export_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '201': "Frame",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/exports', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def start_replay(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], replay_body : Annotated[Optional[ReplayBody], Field(description="application/json")] = None, **kwargs) -> str:  # noqa: E501
        """start_replay  # noqa: E501

        Start Replay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_replay(subscriptionid, replay_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param replay_body: application/json
        :type replay_body: ReplayBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.start_replay_with_http_info(subscriptionid, replay_body, **kwargs)  # noqa: E501

    @validate_arguments
    def start_replay_with_http_info(self, subscriptionid : Annotated[StrictStr, Field(..., description="Subscription ID")], replay_body : Annotated[Optional[ReplayBody], Field(description="application/json")] = None, **kwargs):  # noqa: E501
        """start_replay  # noqa: E501

        Start Replay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_replay_with_http_info(subscriptionid, replay_body, async_req=True)
        >>> result = thread.get()

        :param subscriptionid: Subscription ID (required)
        :type subscriptionid: str
        :param replay_body: application/json
        :type replay_body: ReplayBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'subscriptionid',
            'replay_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_replay" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['subscriptionid']:
            _path_params['subscriptionid'] = _params['subscriptionid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['replay_body']:
            _body_params = _params['replay_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '202': "str",
            '400': "GenericErrorResponse",
            '404': "GenericErrorResponse",
            '500': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/vault/subscriptions/{subscriptionid}/replays', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
